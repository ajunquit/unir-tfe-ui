# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: ci-build-artifact #Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: webapp-tfe-unir-dev    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.x'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "main" ]
  repository_dispatch:
    types: [trigger-white-label-pipeline]

permissions:
  contents: read

jobs:
  update-submodules:
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0  # Necesario para el historial completo
          token: ${{ secrets.PAT_POLYREPO }}  # O usa un PAT si los submódulos son privados
  
      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
  
      - name: Update all submodules to latest commits
        run: |
          # Actualizar todos los submódulos a sus últimas versiones
          git submodule update --init --recursive --remote
          
          # Obtener el estado actual de los submódulos
          git submodule status --recursive
          
          # Hacer stage de los cambios en las referencias de submódulos
          git add .gitmodules
          git add -u  # Actualiza todos los archivos trackeados cambiados
  
      - name: Commit and push if submodules changed
        run: |
          # Verificar si hay cambios para hacer commit
          if [[ -n $(git status --porcelain) ]]; then
            echo "Changes detected, creating commit..."
            git commit -m "Update submodules to latest versions"
            git push origin master
          else
            echo "No changes in submodules detected"
          fi
        
  build:
    runs-on: ubuntu-latest
    needs: update-submodules

    steps:
    
      - uses: actions/checkout@v4
        with:
          submodules: 'true'  # valor: true, Esto es clave para descargar submódulos | valor:recursive, para actualizar todos los submodulos
          fetch-depth: 0      # Opcional: descarga todo el historial para submódulos
          
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: net-app
          path: ${{env.DOTNET_ROOT}}/myapp
          if-no-files-found: error

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: net-app
          
      - name: Azure Login # if use publish.profile option
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
