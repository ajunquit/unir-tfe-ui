name: ci-default

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  repository_dispatch:
    types: [ trigger-white-label-pipeline ]

permissions:
  contents: read
  packages: read

env:
  DOTNET_VERSION: '8.x'

jobs:
  build_test_publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Cache NuGet + snapshot previo (para estimar % de hit) ----------
      - name: Cache NuGet
        id: nuget_cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Snapshot NuGet packages (pre-restore)
        run: |
          mkdir -p .cache-metrics
          find ~/.nuget/packages -maxdepth 2 -mindepth 2 -type d 2>/dev/null \
            | sed 's#.*/packages/##' \
            | tr '[:upper:]' '[:lower:]' \
            | sort > .cache-metrics/pre.txt || true

      - name: Mostrar sources (debug)
        run: dotnet nuget list source

      # ---------- Restore / Build / Test con cobertura ----------
      - name: Restore
        run: |
          dotnet restore \
            --source "https://api.nuget.org/v3/index.json" \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test (with coverage)
        run: |
          dotnet test --configuration Release --no-build --verbosity normal \
            --logger "trx;LogFileName=test_results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      # ---------- Generar reporte de cobertura (MarkdownSummary + HTML) ----------
      - name: Generate coverage summary
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: '**/TestResults/**/coverage.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'MarkdownSummary;HtmlInline_AzurePipelines'

      - name: Add coverage to Job Summary
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat coveragereport/Summary.md >> $GITHUB_STEP_SUMMARY

      # ---------- Artefactos requeridos ----------
      - name: Upload test-results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            TestResults/**/*.trx
            TestResults/**/coverage.cobertura.xml
          if-no-files-found: error

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coveragereport
          if-no-files-found: error

      # ---------- Resumen de Cache NuGet (HIT/MISS y % estimado) ----------
      - name: Compute NuGet cache hit %
        run: |
          SOLUTION=$(ls *.sln | head -n 1)
          if [ -n "$SOLUTION" ]; then
            dotnet list "$SOLUTION" package --include-transitive --format json > .cache-metrics/list.json
            jq -r '
              [.projects[].frameworks[] 
                | (.topLevelPackages + .transitivePackages // [])
                | .[] | "\(.id | ascii_downcase)/\(.resolvedVersion | ascii_downcase)"
              ] | unique | .[]' .cache-metrics/list.json > .cache-metrics/required.txt
          else
            # Si no hay .sln en raíz, evita fallo
            touch .cache-metrics/required.txt
          fi

          comm -12 .cache-metrics/pre.txt .cache-metrics/required.txt > .cache-metrics/hit.txt || true

          total=$(wc -l < .cache-metrics/required.txt | tr -d ' ')
          hits=$(wc -l < .cache-metrics/hit.txt | tr -d ' ')
          pct=0
          if [ "$total" -gt 0 ]; then
            pct=$(awk -v h="$hits" -v t="$total" 'BEGIN{printf("%.0f", (h*100.0)/t)}')
          fi

          {
            echo "## Cache NuGet"
            echo
            echo "- Acción cache: **${{ steps.nuget_cache.outputs.cache-hit == 'true' && 'HIT' || 'MISS' }}**"
            echo "- Paquetes requeridos: **$total**"
            echo "- Presentes desde caché (pre-restore): **$hits**"
            echo "- **Cache hit estimado:** $pct%"
          } >> $GITHUB_STEP_SUMMARY

      # ---------- Publicación app (igual que antes) ----------
      - name: Publish
        run: dotnet publish -c Release -o ${{ github.workspace }}/publish

      - name: Upload artifact (app)
        uses: actions/upload-artifact@v4
        with:
          name: net-app
          path: ${{ github.workspace }}/publish
          if-no-files-found: error

      # ---------- Metadata para CD cuando viene por repository_dispatch ----------
      - name: Export deploy metadata (only for repository_dispatch)
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          jq -n \
            --arg env   "${{ github.event.client_payload.environment || 'Development' }}" \
            --arg app   "${{ github.event.client_payload.azure_webapp_name || '' }}" \
            --arg ref   "${{ github.event.client_payload.ref || 'main' }}" \
            --arg rtag  "${{ github.event.client_payload.release_tag || '' }}" \
            --arg murl  "${{ github.event.client_payload.manifest_url || '' }}" \
            '{environment:$env, azure_webapp_name:$app, ref:$ref, release_tag:$rtag, manifest_url:$murl}' \
            > deploy-metadata.json

      - name: Upload deploy metadata
        if: ${{ github.event_name == 'repository_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: deploy-metadata
          path: deploy-metadata.json
          if-no-files-found: ignore
